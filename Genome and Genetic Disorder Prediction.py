# -*- coding: utf-8 -*-
"""SET Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11ZoDEjmZjwo0VWtcUMQIjcZfOXiZtsGg
"""

# Importing the libraries

!pip install catboost
!pip install dataprep by
import sys
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from warnings import filterwarnings
from mpl_toolkits.mplot3d import Axes3D
import statsmodels.api as sm
import missingno as msno
import statsmodels.stats.api as sms
from sklearn.decomposition import PCA
from sklearn.preprocessing import scale
from sklearn.neighbors import LocalOutlierFactor
from scipy.stats import levene
from scipy.stats import shapiro
from scipy.stats.stats import pearsonr
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
from sklearn.preprocessing import scale
from sklearn.model_selection import ShuffleSplit, GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score
from sklearn import model_selection
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import BaggingRegressor
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor
from sklearn.neural_network import MLPClassifier
from sklearn.linear_model import LinearRegression
from sklearn.cross_decomposition import PLSRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import RidgeCV
from sklearn.linear_model import Lasso
from sklearn.linear_model import LassoCV
from sklearn.linear_model import ElasticNet
from sklearn.linear_model import ElasticNetCV
from sklearn import linear_model
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier
import xgboost as xgb
from xgboost import XGBRegressor, XGBClassifier
from lightgbm import LGBMRegressor, LGBMClassifier
from catboost import CatBoostRegressor, CatBoostClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import tree
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve
from yellowbrick.cluster import KElbowVisualizer
from sklearn.cluster import KMeans
from sklearn.pipeline import Pipeline
from sklearn.manifold import Isomap,TSNE
from sklearn.feature_selection import mutual_info_classif
from tqdm.notebook import tqdm
from scipy.stats import ttest_ind
import plotly.express as px
import plotly.graph_objs as go
import plotly.offline as pyo
import scipy.stats as stats
import pymc3 as pm
from dataprep.eda import plot
from dataprep.eda import plot_diff
from dataprep.eda import plot_correlation
from dataprep.eda import plot_missing
import plotly.figure_factory as ff
from collections import Counter
import pandas_profiling as pp
import datetime as dt
import plotly.express as px
import plotly.graph_objects as go

filterwarnings("ignore", category=DeprecationWarning) 
filterwarnings("ignore", category=FutureWarning) 
filterwarnings("ignore", category=UserWarning)

# Read the file

df = pd.read_csv("train 2.csv")
df1 = df.copy()

df1

# Drop the unnecessary columns

df1.drop(["Patient Id","Patient First Name","Family Name","Father's name","Location of Institute","Institute Name","Test 1","Test 2","Test 3","Test 4","Test 5","Symptom 1","Symptom 2","Symptom 3","Symptom 4","Symptom 5"],inplace=True,axis=1)

# Replace the NaN values

df1["Birth asphyxia"] = df1["Birth asphyxia"].replace("No record",np.NaN)
df1["Birth asphyxia"] = df1["Birth asphyxia"].replace("Not available",np.NaN)
 
df1["Autopsy shows birth defect (if applicable)"] = df1["Autopsy shows birth defect (if applicable)"].replace("None",np.NaN)
df1["Autopsy shows birth defect (if applicable)"] = df1["Autopsy shows birth defect (if applicable)"].replace("Not applicable",np.NaN)
 
df1["H/O radiation exposure (x-ray)"] = df1["H/O radiation exposure (x-ray)"].replace("Not applicable",np.NaN)
df1["H/O radiation exposure (x-ray)"] = df1["H/O radiation exposure (x-ray)"].replace("-",np.NaN)
 
df1["H/O substance abuse"] = df1["H/O substance abuse"].replace("Not applicable",np.NaN)
df1["H/O substance abuse"] = df1["H/O substance abuse"].replace("-",np.NaN)

# Rename the columns

df1.rename(columns={"Patient Age":"Patient_Age","Genes in mother's side":"Genes_Mother_Side","Paternal gene":"Paternal_Gene","Blood cell count (mcL)":"Blood_Cell_mcL","Mother's age":"Mother_Age","Father's age":"Father_Age","Respiratory Rate (breaths/min)":"Respiratory_Rate_Breaths_Min","Heart Rate (rates/min":"Heart_Rates_Min","Parental consent":"Parental_Consent","Follow-up":"Follow_Up","Birth asphyxia":"Birth_Asphyxia","Autopsy shows birth defect (if applicable)":"Autopsy_Birth_Defect",  "Place of birth":"Place_Birth","Folic acid details (peri-conceptional)":"Folic_Acid","H/O serious maternal illness":"Maternal_Illness","H/O radiation exposure (x-ray)":"Radiation_Exposure","H/O substance abuse":"Substance_Abuse","Assisted conception IVF/ART":"Assisted_Conception","History of anomalies in previous pregnancies":"History_Previous_Pregnancies","No. of previous abortion":"Previous_Abortion","Birth defects":"Birth_Defects","White Blood cell count (thousand per microliter)":"White_Blood_Cell","Blood test result":"Blood_Test_Result","Genetic Disorder":"Genetic_Disorder","Disorder Subclass":"Disorder_Subclass","Inherited from father":"Inherited_Father","Maternal gene":"Maternal_Gene"},inplace=True)

#Sort the values

df1.sort_values(by=["Patient_Age"],inplace=True)

#Replace the null values

df1["Inherited_Father"].fillna(df1["Inherited_Father"].mode()[0], inplace=True)
df1["Maternal_Gene"].fillna(df1["Maternal_Gene"].mode()[0], inplace=True)
df1["Respiratory_Rate_Breaths_Min"].fillna(df1["Respiratory_Rate_Breaths_Min"].mode()[0], inplace=True)
df1["Heart_Rates_Min"].fillna(df1["Heart_Rates_Min"].mode()[0], inplace=True)
df1["Follow_Up"].fillna(df1["Follow_Up"].mode()[0], inplace=True)
df1["Gender"].fillna(df1["Gender"].mode()[0], inplace=True)
df1["Birth_Asphyxia"].fillna(df1["Birth_Asphyxia"].mode()[0], inplace=True)
df1["Autopsy_Birth_Defect"].fillna(df1["Autopsy_Birth_Defect"].mode()[0], inplace=True)
df1["Place_Birth"].fillna(df1["Place_Birth"].mode()[0], inplace=True)
df1["Folic_Acid"].fillna(df1["Folic_Acid"].mode()[0], inplace=True)
df1["Maternal_Illness"].fillna(df1["Maternal_Illness"].mode()[0], inplace=True)
df1["Radiation_Exposure"].fillna(df1["Radiation_Exposure"].mode()[0], inplace=True)
df1["Substance_Abuse"].fillna(df1["Substance_Abuse"].mode()[0], inplace=True)
df1["Assisted_Conception"].fillna(df1["Assisted_Conception"].mode()[0], inplace=True)
df1["History_Previous_Pregnancies"].fillna(df1["History_Previous_Pregnancies"].mode()[0], inplace=True)
df1["Birth_Defects"].fillna(df1["Birth_Defects"].mode()[0], inplace=True)
df1["Blood_Test_Result"].fillna(df1["Blood_Test_Result"].mode()[0], inplace=True)
 
 
df1["Mother_Age"].fillna(df1.groupby(["Disorder_Subclass"])["Mother_Age"].transform("mean"),inplace=True)
df1["Father_Age"].fillna(df1.groupby(["Disorder_Subclass"])["Father_Age"].transform("mean"),inplace=True)
df1["Previous_Abortion"].fillna(df1.groupby(["Disorder_Subclass"])["Previous_Abortion"].transform("mean"),inplace=True)
df1["White_Blood_Cell"].fillna(df1.groupby(["Disorder_Subclass"])["White_Blood_Cell"].transform("mean"),inplace=True)
 
df1.dropna(inplace=True,axis=0)

print("NAN VALUES:\n")
print(df1.isna().sum())

df2= df1.copy()

df2.dropna(inplace=True,axis=0)

df2 = df2.reset_index(drop=True)

print("NAN VALUES:\n")
print(df2.isna().sum())

# Encoding of the data

Encode_Data = df2.copy()

Encode_Func = LabelEncoder()

Encode_Data["Genes_Mother_Side"] = Encode_Func.fit_transform(Encode_Data["Genes_Mother_Side"])
Encode_Data["Inherited_Father"] = Encode_Func.fit_transform(Encode_Data["Inherited_Father"])
Encode_Data["Maternal_Gene"] = Encode_Func.fit_transform(Encode_Data["Maternal_Gene"])
Encode_Data["Paternal_Gene"] = Encode_Func.fit_transform(Encode_Data["Paternal_Gene"])
Encode_Data["Status"] = Encode_Func.fit_transform(Encode_Data["Status"])
Encode_Data["Respiratory_Rate_Breaths_Min"] = Encode_Func.fit_transform(Encode_Data["Respiratory_Rate_Breaths_Min"])
Encode_Data["Heart_Rates_Min"] = Encode_Func.fit_transform(Encode_Data["Heart_Rates_Min"])
Encode_Data["Follow_Up"] = Encode_Func.fit_transform(Encode_Data["Follow_Up"])
Encode_Data["Gender"] = Encode_Func.fit_transform(Encode_Data["Gender"])
Encode_Data["Birth_Asphyxia"] = Encode_Func.fit_transform(Encode_Data["Birth_Asphyxia"])
Encode_Data["Autopsy_Birth_Defect"] = Encode_Func.fit_transform(Encode_Data["Autopsy_Birth_Defect"])
Encode_Data["Place_Birth"] = Encode_Func.fit_transform(Encode_Data["Place_Birth"])
Encode_Data["Folic_Acid"] = Encode_Func.fit_transform(Encode_Data["Folic_Acid"])
Encode_Data["Maternal_Illness"] = Encode_Func.fit_transform(Encode_Data["Maternal_Illness"])
Encode_Data["Radiation_Exposure"] = Encode_Func.fit_transform(Encode_Data["Radiation_Exposure"])
Encode_Data["Substance_Abuse"] = Encode_Func.fit_transform(Encode_Data["Substance_Abuse"])
Encode_Data["Assisted_Conception"] = Encode_Func.fit_transform(Encode_Data["Assisted_Conception"])
Encode_Data["History_Previous_Pregnancies"] = Encode_Func.fit_transform(Encode_Data["History_Previous_Pregnancies"])
Encode_Data["Birth_Defects"] = Encode_Func.fit_transform(Encode_Data["Birth_Defects"])
Encode_Data["Blood_Test_Result"] = Encode_Func.fit_transform(Encode_Data["Blood_Test_Result"])
Encode_Data["Genetic_Disorder"] = Encode_Func.fit_transform(Encode_Data["Genetic_Disorder"])
Encode_Data["Disorder_Subclass"] = Encode_Func.fit_transform(Encode_Data["Disorder_Subclass"])
Encode_Data["Parental_Consent"] = Encode_Func.fit_transform(Encode_Data["Parental_Consent"])
Encode_Data = Encode_Data.astype("float32")

Encode_Data.info()

Encode_Data

Genetic_Disorder_Data = Encode_Data.drop("Disorder_Subclass",axis=1) ; Genetic_Disorder_Data

Disorder_Subclass_Data = Encode_Data.drop("Genetic_Disorder",axis=1) ; Disorder_Subclass_Data

GENETIC_X =  Genetic_Disorder_Data.drop("Genetic_Disorder",axis=1)
GENETIC_Y = Genetic_Disorder_Data["Genetic_Disorder"]

GX_Train,GX_Test,GY_Train,GY_Test = train_test_split(GENETIC_X,GENETIC_Y,test_size=0.2,random_state=42,shuffle=True)

GX_Train,GX_Test,GY_Train,GY_Test = train_test_split(GENETIC_X,GENETIC_Y,test_size=0.2,random_state=42,shuffle=True)

Scaler_Function = StandardScaler()

GX_Train = Scaler_Function.fit_transform(GX_Train)
GX_Test = Scaler_Function.fit_transform(GX_Test)

lj = LogisticRegression(solver="liblinear").fit(GX_Train,GY_Train)
gnb = GaussianNB().fit(GX_Train,GY_Train)
knnc = KNeighborsClassifier().fit(GX_Train,GY_Train)
cartc = DecisionTreeClassifier(random_state=42).fit(GX_Train,GY_Train)
rfc = RandomForestClassifier(random_state=42,verbose=False).fit(GX_Train,GY_Train)
gbmc = GradientBoostingClassifier(verbose=False).fit(GX_Train,GY_Train)
xgbc = XGBClassifier().fit(GX_Train,GY_Train)
lgbmc = LGBMClassifier().fit(GX_Train,GY_Train)
catbc = CatBoostClassifier(verbose=False).fit(GX_Train,GY_Train)

modelsc = [lj,gnb,knnc,cartc,rfc,gbmc,xgbc,lgbmc,catbc]

for model in modelsc:
    name = model.__class__.__name__
    predict = model.predict(GX_Test)
    R2CV = cross_val_score(model,GX_Test,GY_Test,cv=10,verbose=False).mean()
    error = -cross_val_score(model,GX_Test,GY_Test,cv=10,scoring="neg_mean_squared_error",verbose=False).mean()
    print(name + ": ")
    print("-" * 10)
    print("ACC-->",accuracy_score(GY_Test,predict))
    print("R2CV-->",R2CV)
    print("MEAN SQUARED ERROR-->",np.sqrt(error))
    print("-" * 30)

r = pd.DataFrame(columns=["MODELS","R2CV"])
for model in modelsc:
    name = model.__class__.__name__
    R2CV = cross_val_score(model,GX_Test,GY_Test,cv=10,verbose=False).mean()
    result = pd.DataFrame([[name,R2CV*100]],columns=["MODELS","R2CV"])
    r = r.append(result)
    
figure = plt.figure(figsize=(20,8))   
sns.barplot(x="R2CV",y="MODELS",data=r,color="k")
plt.xlabel("R2CV")
plt.ylabel("MODELS")
plt.xlim(0,100)
plt.title("MODEL ACCURACY COMPARISON")
plt.show()

r = pd.DataFrame(columns=["MODELS","error"])
for model in modelsc:
    name = model.__class__.__name__
    error = -cross_val_score(model,GX_Test,GY_Test,cv=10,scoring="neg_mean_squared_error").mean()
    result = pd.DataFrame([[name,np.sqrt(error)]],columns=["MODELS","error"])
    r = r.append(result)
    
figure = plt.figure(figsize=(20,8))   
sns.barplot(x="error",y="MODELS",data=r,color="r")
plt.xlabel("ERROR")
plt.ylabel("MODELS")
plt.xlim(0,2)
plt.title("MODEL ERROR COMPARISON")
plt.show()

df2 = df2.reset_index(drop=True)

df2

df2["Inherited_Father"].fillna(df2["Inherited_Father"].mode()[0], inplace=True)
df2["Maternal_Gene"].fillna(df2["Maternal_Gene"].mode()[0], inplace=True)
df2["Respiratory_Rate_Breaths_Min"].fillna(df2["Respiratory_Rate_Breaths_Min"].mode()[0], inplace=True)
df2["Heart_Rates_Min"].fillna(df2["Heart_Rates_Min"].mode()[0], inplace=True)
df2["Follow_Up"].fillna(df2["Follow_Up"].mode()[0], inplace=True)
df2["Gender"].fillna(df2["Gender"].mode()[0], inplace=True)
df2["Birth_Asphyxia"].fillna(df2["Birth_Asphyxia"].mode()[0], inplace=True)
df2["Autopsy_Birth_Defect"].fillna(df2["Autopsy_Birth_Defect"].mode()[0], inplace=True)
df2["Place_Birth"].fillna(df2["Place_Birth"].mode()[0], inplace=True)
df2["Folic_Acid"].fillna(df2["Folic_Acid"].mode()[0], inplace=True)
df2["Maternal_Illness"].fillna(df2["Maternal_Illness"].mode()[0], inplace=True)
df2["Radiation_Exposure"].fillna(df2["Radiation_Exposure"].mode()[0], inplace=True)
df2["Substance_Abuse"].fillna(df2["Substance_Abuse"].mode()[0], inplace=True)
df2["Assisted_Conception"].fillna(df2["Assisted_Conception"].mode()[0], inplace=True)
df2["History_Previous_Pregnancies"].fillna(df2["History_Previous_Pregnancies"].mode()[0], inplace=True)
df2["Birth_Defects"].fillna(df2["Birth_Defects"].mode()[0], inplace=True)
df2["Blood_Test_Result"].fillna(df2["Blood_Test_Result"].mode()[0], inplace=True)
df2["Mother_Age"].fillna(df2.groupby(["Disorder_Subclass"])["Mother_Age"].transform("mean"),inplace=True)
df2["Father_Age"].fillna(df2.groupby(["Disorder_Subclass"])["Father_Age"].transform("mean"),inplace=True)
df2["Previous_Abortion"].fillna(df2.groupby(["Disorder_Subclass"])["Previous_Abortion"].transform("mean"),inplace=True)
df2["White_Blood_Cell"].fillna(df2.groupby(["Disorder_Subclass"])["White_Blood_Cell"].transform("mean"),inplace=True)
df2.dropna(inplace=True,axis=0)

print("NAN VALUES:\n")
print(df2.isna().sum())

print("INFO:\n")
print(df2.info())

Main_Encoded_Data = df2.copy()

Main_Encoded_Data["Genes_Mother_Side"] = Encode_Func.fit_transform(Main_Encoded_Data["Genes_Mother_Side"])
Main_Encoded_Data["Inherited_Father"] = Encode_Func.fit_transform(Main_Encoded_Data["Inherited_Father"])
Main_Encoded_Data["Maternal_Gene"] = Encode_Func.fit_transform(Main_Encoded_Data["Maternal_Gene"])
Main_Encoded_Data["Paternal_Gene"] = Encode_Func.fit_transform(Main_Encoded_Data["Paternal_Gene"])
Main_Encoded_Data["Status"] = Encode_Func.fit_transform(Main_Encoded_Data["Status"])
Main_Encoded_Data["Respiratory_Rate_Breaths_Min"] = Encode_Func.fit_transform(Main_Encoded_Data["Respiratory_Rate_Breaths_Min"])
Main_Encoded_Data["Heart_Rates_Min"] = Encode_Func.fit_transform(Main_Encoded_Data["Heart_Rates_Min"])
Main_Encoded_Data["Follow_Up"] = Encode_Func.fit_transform(Main_Encoded_Data["Follow_Up"])
Main_Encoded_Data["Gender"] = Encode_Func.fit_transform(Main_Encoded_Data["Gender"])
Main_Encoded_Data["Birth_Asphyxia"] = Encode_Func.fit_transform(Main_Encoded_Data["Birth_Asphyxia"])
Main_Encoded_Data["Autopsy_Birth_Defect"] = Encode_Func.fit_transform(Main_Encoded_Data["Autopsy_Birth_Defect"])
Main_Encoded_Data["Place_Birth"] = Encode_Func.fit_transform(Main_Encoded_Data["Place_Birth"])
Main_Encoded_Data["Folic_Acid"] = Encode_Func.fit_transform(Main_Encoded_Data["Folic_Acid"])
Main_Encoded_Data["Maternal_Illness"] = Encode_Func.fit_transform(Main_Encoded_Data["Maternal_Illness"])
Main_Encoded_Data["Radiation_Exposure"] = Encode_Func.fit_transform(Main_Encoded_Data["Radiation_Exposure"])
Main_Encoded_Data["Substance_Abuse"] = Encode_Func.fit_transform(Main_Encoded_Data["Substance_Abuse"])
Main_Encoded_Data["Assisted_Conception"] = Encode_Func.fit_transform(Main_Encoded_Data["Assisted_Conception"])
Main_Encoded_Data["History_Previous_Pregnancies"] = Encode_Func.fit_transform(Main_Encoded_Data["History_Previous_Pregnancies"])
Main_Encoded_Data["Birth_Defects"] = Encode_Func.fit_transform(Main_Encoded_Data["Birth_Defects"])
Main_Encoded_Data["Blood_Test_Result"] = Encode_Func.fit_transform(Main_Encoded_Data["Blood_Test_Result"])
Main_Encoded_Data["Genetic_Disorder"] = Encode_Func.fit_transform(Main_Encoded_Data["Genetic_Disorder"])
Main_Encoded_Data["Disorder_Subclass"] = Encode_Func.fit_transform(Main_Encoded_Data["Disorder_Subclass"])
Main_Encoded_Data["Parental_Consent"] = Encode_Func.fit_transform(Main_Encoded_Data["Parental_Consent"])

Main_Encoded_Data = Main_Encoded_Data.astype("float32")

print("INFO:\n")
print(Main_Encoded_Data.info())

Genetic_Main_Data = Main_Encoded_Data.drop("Disorder_Subclass",axis=1)
Disorder_Main_Data = Main_Encoded_Data.drop("Genetic_Disorder",axis=1)

X =  Genetic_Main_Data.drop("Genetic_Disorder",axis=1)
Y = Genetic_Main_Data["Genetic_Disorder"]

X_Train,X_Test,Y_Train,Y_Test = train_test_split(X,Y,test_size=0.2,random_state=42,shuffle=True)

print("X TRAIN SHAPE: ",X_Train.shape)
print("X TEST SHAPE: ",X_Test.shape)
print("Y TRAIN SHAPE: ",Y_Train.shape)
print("Y TEST SHAPE: ",Y_Test.shape)

Scaler_Function = StandardScaler()

X_Train = Scaler_Function.fit_transform(X_Train)
X_Test = Scaler_Function.fit_transform(X_Test)

lj_m = LogisticRegression(solver="liblinear").fit(X_Train,Y_Train)
gnb_m = GaussianNB().fit(X_Train,Y_Train)
knnc_m = KNeighborsClassifier().fit(X_Train,Y_Train)
cartc_m = DecisionTreeClassifier(random_state=42).fit(X_Train,Y_Train)
rfc_m = RandomForestClassifier(random_state=42,verbose=False).fit(X_Train,Y_Train)
gbmc_m = GradientBoostingClassifier(verbose=False).fit(X_Train,Y_Train)
xgbc_m = XGBClassifier().fit(X_Train,Y_Train)
lgbmc_m = LGBMClassifier().fit(X_Train,Y_Train)
catbc_m = CatBoostClassifier(verbose=False).fit(X_Train,Y_Train)

model_m = [lj_m,gnb_m,knnc_m,cartc_m,rfc_m,gbmc_m,xgbc_m,lgbmc_m,catbc_m]

for model in model_m:
    name = model.__class__.__name__
    predict = model.predict(X_Test)
    R2CV = cross_val_score(model,X_Test,Y_Test,cv=10,verbose=False).mean()
    error = -cross_val_score(model,X_Test,Y_Test,cv=10,scoring="neg_mean_squared_error",verbose=False).mean()
    print(name + ": ")
    print("-" * 10)
    print("ACC-->",accuracy_score(Y_Test,predict))
    print("R2CV-->",R2CV)
    print("MEAN SQUARED ERROR-->",np.sqrt(error))
    print("-" * 30)

